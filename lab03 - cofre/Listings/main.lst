


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Rev1: 10/03/2018
    5 00000000         ; Rev2: 10/04/2019
    6 00000000         ; Este programa espera o usuário apertar a chave USR_SW1
                        e/ou a chave USR_SW2.
    7 00000000         ; Caso o usuário pressione a chave USR_SW1, acenderá o L
                       ED3 (PF4). Caso o usuário pressione 
    8 00000000         ; a chave USR_SW2, acenderá o LED4 (PF0). Caso as duas c
                       haves sejam pressionadas, os dois 
    9 00000000         ; LEDs acendem.
   10 00000000         
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
   13 00000000         ; ------------------------------------------------------
                       -------------------------
   14 00000000         ; Declarações EQU - Defines
   15 00000000         ;<NOME>         EQU <VALOR>
   16 00000000         ; ========================
   17 00000000         
   18 00000000         ; ------------------------------------------------------
                       -------------------------
   19 00000000         ; Área de Dados - Declarações de variáveis
   20 00000000                 AREA             DATA, ALIGN=2
   21 00000000         ; Se alguma variável for chamada em outro arquivo
   22 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   23 00000000         ; partir de outro arquivo
   24 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   25 00000000         ; de <tam> bytes a partir da primeira 
   26 00000000         ; posição da RAM  
   27 00000000         
   28 00000000         ; ------------------------------------------------------
                       -------------------------
   29 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   30 00000000         ;                  código
   31 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   32 00000000         
   33 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   34 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   35 00000000         ; outro arquivo. No caso startup.s
   36 00000000         
   37 00000000         ; Se chamar alguma função externa 
   38 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   39 00000000         ; função <func>
   40 00000000                 IMPORT           PLL_Init
   41 00000000                 IMPORT           SysTick_Init
   42 00000000                 IMPORT           SysTick_Wait1ms
   43 00000000         



ARM Macro Assembler    Page 2 


   44 00000000                 IMPORT           GPIO_Init
   45 00000000                 IMPORT           PortF_Output
   46 00000000                 IMPORT           PortJ_Input
   47 00000000                 IMPORT           GPIOPortJ_Handler
   48 00000000         
   49 00000000                 IMPORT           LCD_init
   50 00000000                 IMPORT           LCD_reset
   51 00000000                 IMPORT           LCD_command
   52 00000000                 IMPORT           LCD_write_data
   53 00000000                 IMPORT           LCD_print_string
   54 00000000         
   55 00000000                 IMPORT           MKBOARD_init
   56 00000000                 IMPORT           MKBOARD_getValuePressed
   57 00000000                 IMPORT           MKBOARD_valueToASCII
   58 00000000         
   59 00000000                 IMPORT           LEDS_AND_DISPLAYS_init
   60 00000000                 IMPORT           select_leds
   61 00000000                 IMPORT           select_dig_DS
   62 00000000                 IMPORT           turn_leds_ON
   63 00000000                 IMPORT           turn_DS1_ON
   64 00000000                 IMPORT           turn_DS2_ON
   65 00000000         
   66 00000000                 IMPORT           SysTick_Wait1us
   67 00000000                 IMPORT           SysTick_Wait1ms
   68 00000000         
   69 00000000         ; ========================
   70 00000000         ; Constantes
   71 00000000 20000004 
                       NUM_ATTEMPTS
                               EQU              0x20000004
   72 00000000         
   73 00000000         ; ========================
   74 00000000         ; Ponteiros
   75 00000000 20000000 
                       ARRAY_PW
                               EQU              0x20000000
   76 00000000 20000008 
                       INPUT_PW
                               EQU              0x20000008
   77 00000000         ; Constantes
   78 00000000         
   79 00000000         ; ------------------------------------------------------
                       -------------------------
   80 00000000         ; Função main()    
   81 00000000         Start
   82 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   83 00000004 F7FF FFFE       BL               SysTick_Init
   84 00000008 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   85 0000000C F7FF FFFE       BL               LCD_init
   86 00000010 F7FF FFFE       BL               MKBOARD_init
   87 00000014 F7FF FFFE       BL               LEDS_AND_DISPLAYS_init
   88 00000018         ; Initialize the password length counter
   89 00000018 F04F 0400       MOV              R4, #0
   90 0000001C         MainLoop



ARM Macro Assembler    Page 3 


   91 0000001C F7FF FFFE       BL               LCD_reset
   92 00000020 485F            LDR              R0, =MSG_OPEN
   93 00000022 F7FF FFFE       BL               LCD_print_string
   94 00000026 F04F 00C0       MOV              R0, #0xC0
   95 0000002A F7FF FFFE       BL               LCD_command
   96 0000002E 485D            LDR              R0, =MSG_PWscreen
   97 00000030 F7FF FFFE       BL               LCD_print_string
   98 00000034         
   99 00000034         wait_click_open
  100 00000034 F7FF FFFE       BL               MKBOARD_getValuePressed
  101 00000038 28FF            CMP              R0, #0xFF
  102 0000003A D0FB            BEQ              wait_click_open
  103 0000003C         ; Check if the pressed key is 'E'
  104 0000003C 280E            CMP              R0, #0x0E
  105 0000003E D15B            BNE              not_e_key_open
  106 00000040         ; Check if the password has 4 digits
  107 00000040 2C04            CMP              R4, #4
  108 00000042 D1F7            BNE              wait_click_open
  109 00000044         
  110 00000044         Closing
  111 00000044 F7FF FFFE       BL               LCD_reset
  112 00000048 4957            LDR              R1, =INPUT_PW ; Source array po
                                                            inter
  113 0000004A F04F 5200       LDR              R2, =ARRAY_PW ; Destination arr
                                                            ay pointer
  114 0000004E F04F 0305       MOV              R3, #5      ; Size of the array
                                                             to copy (4 digits 
                                                            + null-terminator)
  115 00000052 F000 F83A       BL               copy_array  ; Call the copy_arr
                                                            ay function
  116 00000056 4954            LDR              R1, =INPUT_PW ; Array pointer
  117 00000058 F04F 0205       MOV              R2, #5      ; Size of the array
                                                             to clear (4 digits
                                                             + null-terminator)
                                                            
  118 0000005C F000 F841       BL               clear_array ; Call the clear_ar
                                                            ray function
  119 00000060 4852            LDR              R0, =MSG_CLOSING
  120 00000062 F7FF FFFE       BL               LCD_print_string
  121 00000066         
  122 00000066         ; Display the stored password on the second line
  123 00000066         ; Print the MSG_PWscreen before displaying the stored pa
                       ssword
  124 00000066 F04F 00C0       MOV              R0, #0xC0
  125 0000006A F7FF FFFE       BL               LCD_command
  126 0000006E 484D            LDR              R0, =MSG_PWscreen
  127 00000070 F7FF FFFE       BL               LCD_print_string
  128 00000074 F04F 5100       LDR              R1, =ARRAY_PW
  129 00000078 F04F 0200       MOV              R2, #0
  130 0000007C         
  131 0000007C         display_password_loop
  132 0000007C 7808            LDRB             R0, [R1]
  133 0000007E F7FF FFFE       BL               MKBOARD_valueToASCII
  134 00000082 F7FF FFFE       BL               LCD_write_data
  135 00000086 F101 0101       ADD              R1, R1, #1
  136 0000008A F102 0201       ADD              R2, R2, #1
  137 0000008E 2A04            CMP              R2, #4
  138 00000090 DBF4            BLT              display_password_loop
  139 00000092         ; Add appropriate delay subroutine to pause the display 



ARM Macro Assembler    Page 4 


                       for 5 seconds
  140 00000092 F241 3088       LDR              R0, =5000
  141 00000096 F7FF FFFE       BL               SysTick_Wait1ms
  142 0000009A F000 F800       BL               Closed
  143 0000009E         ; Display MSG_CLOSED
  144 0000009E         Closed
  145 0000009E F7FF FFFE       BL               LCD_reset
  146 000000A2 4843            LDR              R0, =MSG_CLOSED
  147 000000A4 F7FF FFFE       BL               LCD_print_string
  148 000000A8 F04F 00C0       MOV              R0, #0xC0
  149 000000AC F7FF FFFE       BL               LCD_command
  150 000000B0 483C            LDR              R0, =MSG_PWscreen
  151 000000B2 F7FF FFFE       BL               LCD_print_string
  152 000000B6 F04F 0400       MOV              R4, #0
  153 000000BA         wait_click_closed
  154 000000BA F7FF FFFE       BL               MKBOARD_getValuePressed
  155 000000BE 28FF            CMP              R0, #0xFF
  156 000000C0 D0FB            BEQ              wait_click_closed
  157 000000C2         ; Check if the pressed key is 'E'
  158 000000C2 280E            CMP              R0, #0x0E
  159 000000C4 D12B            BNE              not_e_key_closed
  160 000000C6         ; Check if the password has 4 digits
  161 000000C6 2C04            CMP              R4, #4
  162 000000C8 D1F7            BNE              wait_click_closed
  163 000000CA         ; If 'E' is pressed and the password has 4 digits, store
                        the password and display MSG_CLOSING
  164 000000CA         
  165 000000CA         copy_array
  166 000000CA B50E            PUSH             {R1, R2, R3, LR} ; Save the reg
                                                            isters
  167 000000CC         
  168 000000CC         copy_loop
  169 000000CC 7808            LDRB             R0, [R1]    ; Load a byte from 
                                                            the source array
  170 000000CE 7010            STRB             R0, [R2]    ; Store the byte in
                                                             the destination ar
                                                            ray
  171 000000D0 F101 0101       ADD              R1, R1, #1  ; Increment the sou
                                                            rce array pointer
  172 000000D4 F102 0201       ADD              R2, R2, #1  ; Increment the des
                                                            tination array poin
                                                            ter
  173 000000D8 1E5B            SUBS             R3, R3, #1  ; Decrement the siz
                                                            e counter
  174 000000DA D1F7            BNE              copy_loop   ; If the size count
                                                            er is not zero, con
                                                            tinue copying
  175 000000DC E8BD 400E       POP              {R1, R2, R3, LR} ; Restore the 
                                                            registers
  176 000000E0 4770            BX               LR          ; Return to the cal
                                                            ling function
  177 000000E2         
  178 000000E2         clear_array
  179 000000E2 B506            PUSH             {R1, R2, LR} ; Save the registe
                                                            rs
  180 000000E4         
  181 000000E4         clear_loop
  182 000000E4 F04F 0000       MOV              R0, #0      ; Load the value 0
  183 000000E8 7008            STRB             R0, [R1]    ; Store the value 0



ARM Macro Assembler    Page 5 


                                                             in the array
  184 000000EA F101 0101       ADD              R1, R1, #1  ; Increment the arr
                                                            ay pointer
  185 000000EE 1E52            SUBS             R2, R2, #1  ; Decrement the siz
                                                            e counter
  186 000000F0 D1F8            BNE              clear_loop  ; If the size count
                                                            er is not zero, con
                                                            tinue clearing
  187 000000F2 E8BD 4006       POP              {R1, R2, LR} ; Restore the regi
                                                            sters
  188 000000F6 4770            BX               LR          ; Return to the cal
                                                            ling function
  189 000000F8         
  190 000000F8         ; If 'E' is pressed and the password has 4 digits, store
                        the password and display MSG_CLOSING
  191 000000F8         not_e_key_open
  192 000000F8         ; Check if the password already has 4 digits
  193 000000F8 2C04            CMP              R4, #4
  194 000000FA D09B            BEQ              wait_click_open
  195 000000FC         ; Store the pressed key value in ARRAY_PW
  196 000000FC 492A            LDR              R1, =INPUT_PW
  197 000000FE 4421            ADD              R1, R1, R4
  198 00000100 6008            STR              R0, [R1]
  199 00000102         ; Increment the password length counter
  200 00000102 F104 0401       ADD              R4, R4, #1
  201 00000106         ; Check if the password length counter is now 4
  202 00000106 2C05            CMP              R4, #5
  203 00000108 D104            BNE              not_final_digit_open
  204 0000010A         ; If the password length counter is now 4, null-terminat
                       e the ARRAY_PW string
  205 0000010A F101 0101       ADD              R1, R1, #1
  206 0000010E F04F 0000       MOV              R0, #0
  207 00000112 6008            STR              R0, [R1]
  208 00000114         not_final_digit_open
  209 00000114         ; Convert the value to ASCII and display it
  210 00000114 F7FF FFFE       BL               MKBOARD_valueToASCII
  211 00000118 F7FF FFFE       BL               LCD_write_data
  212 0000011C E78A            B                wait_click_open
  213 0000011E         
  214 0000011E         not_e_key_closed
  215 0000011E         ; Check if the password already has 4 digits
  216 0000011E 2C04            CMP              R4, #4
  217 00000120 D0CB            BEQ              wait_click_closed
  218 00000122         ; Store the pressed key value in ARRAY_PW
  219 00000122 4921            LDR              R1, =INPUT_PW
  220 00000124 4421            ADD              R1, R1, R4
  221 00000126 6008            STR              R0, [R1]
  222 00000128         ; Increment the password length counter
  223 00000128 F104 0401       ADD              R4, R4, #1
  224 0000012C         ; Check if the password length counter is now 4
  225 0000012C 2C05            CMP              R4, #5
  226 0000012E D104            BNE              not_final_digit_closed
  227 00000130         ; If the password length counter is now 4, null-terminat
                       e the ARRAY_PW string
  228 00000130 F101 0101       ADD              R1, R1, #1
  229 00000134 F04F 0000       MOV              R0, #0
  230 00000138 6008            STR              R0, [R1]
  231 0000013A         not_final_digit_closed
  232 0000013A         ; Convert the value to ASCII and display it



ARM Macro Assembler    Page 6 


  233 0000013A F7FF FFFE       BL               MKBOARD_valueToASCII
  234 0000013E F7FF FFFE       BL               LCD_write_data
  235 00000142 E7BA            B                wait_click_closed
  236 00000144         
  237 00000144 43 6F 66 
              72 65 20 
              41 62 65 
              72 74 6F 
              20 3A 29 
              20 21 00 MSG_OPEN
                               DCB              "Cofre Aberto :) !",0
  238 00000156 43 6F 66 
              72 65 20 
              41 62 72 
              69 6E 64 
              6F 00    MSG_OPENING
                               DCB              "Cofre Abrindo",0
  239 00000164 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 6E 
              64 6F 00 MSG_CLOSING
                               DCB              "Cofre Fechando",0
  240 00000173 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 64 
              6F 21 20 
              20 00    MSG_CLOSED
                               DCB              "Cofre Fechado!  ",0
  241 00000184 43 6F 66 
              72 65 20 
              54 72 61 
              76 61 64 
              6F 21 00 MSG_LOCKED
                               DCB              "Cofre Travado!",0
  242 00000193 20 50 57 
              3A 00    MSG_PWscreen
                               DCB              " PW:",0
  243 00000198 20 54 65 
              73 74 65 
              20 00    STR2    DCB              " Teste ",0
  244 000001A0         
  245 000001A0                 ALIGN                        ;Garante que o fim 
                                                            da seção está alinh
                                                            ada 
  246 000001A0                 END                          ;Fim do arquivo
              00000000 
              00000000 
              20000008 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\alfon\AppData\Local\Arm
\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 538" --predefine="TM4C1294NCPDT SETA 1" --li
st=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 31 in file main.s
   Uses
      None
Comment: .text unused
Closed 0000009E

Symbol: Closed
   Definitions
      At line 144 in file main.s
   Uses
      At line 142 in file main.s
Comment: Closed used once
Closing 00000044

Symbol: Closing
   Definitions
      At line 110 in file main.s
   Uses
      None
Comment: Closing unused
MSG_CLOSED 00000173

Symbol: MSG_CLOSED
   Definitions
      At line 240 in file main.s
   Uses
      At line 146 in file main.s
Comment: MSG_CLOSED used once
MSG_CLOSING 00000164

Symbol: MSG_CLOSING
   Definitions
      At line 239 in file main.s
   Uses
      At line 119 in file main.s
Comment: MSG_CLOSING used once
MSG_LOCKED 00000184

Symbol: MSG_LOCKED
   Definitions
      At line 241 in file main.s
   Uses
      None
Comment: MSG_LOCKED unused
MSG_OPEN 00000144

Symbol: MSG_OPEN
   Definitions
      At line 237 in file main.s
   Uses
      At line 92 in file main.s
Comment: MSG_OPEN used once
MSG_OPENING 00000156

Symbol: MSG_OPENING



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 238 in file main.s
   Uses
      None
Comment: MSG_OPENING unused
MSG_PWscreen 00000193

Symbol: MSG_PWscreen
   Definitions
      At line 242 in file main.s
   Uses
      At line 96 in file main.s
      At line 126 in file main.s
      At line 150 in file main.s

MainLoop 0000001C

Symbol: MainLoop
   Definitions
      At line 90 in file main.s
   Uses
      None
Comment: MainLoop unused
STR2 00000198

Symbol: STR2
   Definitions
      At line 243 in file main.s
   Uses
      None
Comment: STR2 unused
Start 00000000

Symbol: Start
   Definitions
      At line 81 in file main.s
   Uses
      At line 34 in file main.s
Comment: Start used once
clear_array 000000E2

Symbol: clear_array
   Definitions
      At line 178 in file main.s
   Uses
      At line 118 in file main.s
Comment: clear_array used once
clear_loop 000000E4

Symbol: clear_loop
   Definitions
      At line 181 in file main.s
   Uses
      At line 186 in file main.s
Comment: clear_loop used once
copy_array 000000CA

Symbol: copy_array
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 165 in file main.s
   Uses
      At line 115 in file main.s
Comment: copy_array used once
copy_loop 000000CC

Symbol: copy_loop
   Definitions
      At line 168 in file main.s
   Uses
      At line 174 in file main.s
Comment: copy_loop used once
display_password_loop 0000007C

Symbol: display_password_loop
   Definitions
      At line 131 in file main.s
   Uses
      At line 138 in file main.s
Comment: display_password_loop used once
not_e_key_closed 0000011E

Symbol: not_e_key_closed
   Definitions
      At line 214 in file main.s
   Uses
      At line 159 in file main.s
Comment: not_e_key_closed used once
not_e_key_open 000000F8

Symbol: not_e_key_open
   Definitions
      At line 191 in file main.s
   Uses
      At line 105 in file main.s
Comment: not_e_key_open used once
not_final_digit_closed 0000013A

Symbol: not_final_digit_closed
   Definitions
      At line 231 in file main.s
   Uses
      At line 226 in file main.s
Comment: not_final_digit_closed used once
not_final_digit_open 00000114

Symbol: not_final_digit_open
   Definitions
      At line 208 in file main.s
   Uses
      At line 203 in file main.s
Comment: not_final_digit_open used once
wait_click_closed 000000BA

Symbol: wait_click_closed
   Definitions
      At line 153 in file main.s
   Uses
      At line 156 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 162 in file main.s
      At line 217 in file main.s
      At line 235 in file main.s

wait_click_open 00000034

Symbol: wait_click_open
   Definitions
      At line 99 in file main.s
   Uses
      At line 102 in file main.s
      At line 108 in file main.s
      At line 194 in file main.s
      At line 212 in file main.s

23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ARRAY_PW 20000000

Symbol: ARRAY_PW
   Definitions
      At line 75 in file main.s
   Uses
      At line 113 in file main.s
      At line 128 in file main.s

INPUT_PW 20000008

Symbol: INPUT_PW
   Definitions
      At line 76 in file main.s
   Uses
      At line 112 in file main.s
      At line 116 in file main.s
      At line 196 in file main.s
      At line 219 in file main.s

NUM_ATTEMPTS 20000004

Symbol: NUM_ATTEMPTS
   Definitions
      At line 71 in file main.s
   Uses
      None
Comment: NUM_ATTEMPTS unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIOPortJ_Handler 00000000

Symbol: GPIOPortJ_Handler
   Definitions
      At line 47 in file main.s
   Uses
      None
Comment: GPIOPortJ_Handler unused
GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 44 in file main.s
   Uses
      At line 84 in file main.s
Comment: GPIO_Init used once
LCD_command 00000000

Symbol: LCD_command
   Definitions
      At line 51 in file main.s
   Uses
      At line 95 in file main.s
      At line 125 in file main.s
      At line 149 in file main.s

LCD_init 00000000

Symbol: LCD_init
   Definitions
      At line 49 in file main.s
   Uses
      At line 85 in file main.s
Comment: LCD_init used once
LCD_print_string 00000000

Symbol: LCD_print_string
   Definitions
      At line 53 in file main.s
   Uses
      At line 93 in file main.s
      At line 97 in file main.s
      At line 120 in file main.s
      At line 127 in file main.s
      At line 147 in file main.s
      At line 151 in file main.s

LCD_reset 00000000

Symbol: LCD_reset
   Definitions
      At line 50 in file main.s
   Uses
      At line 91 in file main.s
      At line 111 in file main.s
      At line 145 in file main.s

LCD_write_data 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: LCD_write_data
   Definitions
      At line 52 in file main.s
   Uses
      At line 134 in file main.s
      At line 211 in file main.s
      At line 234 in file main.s

LEDS_AND_DISPLAYS_init 00000000

Symbol: LEDS_AND_DISPLAYS_init
   Definitions
      At line 59 in file main.s
   Uses
      At line 87 in file main.s
Comment: LEDS_AND_DISPLAYS_init used once
MKBOARD_getValuePressed 00000000

Symbol: MKBOARD_getValuePressed
   Definitions
      At line 56 in file main.s
   Uses
      At line 100 in file main.s
      At line 154 in file main.s

MKBOARD_init 00000000

Symbol: MKBOARD_init
   Definitions
      At line 55 in file main.s
   Uses
      At line 86 in file main.s
Comment: MKBOARD_init used once
MKBOARD_valueToASCII 00000000

Symbol: MKBOARD_valueToASCII
   Definitions
      At line 57 in file main.s
   Uses
      At line 133 in file main.s
      At line 210 in file main.s
      At line 233 in file main.s

PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 40 in file main.s
   Uses
      At line 82 in file main.s
Comment: PLL_Init used once
PortF_Output 00000000

Symbol: PortF_Output
   Definitions
      At line 45 in file main.s
   Uses
      None
Comment: PortF_Output unused



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

PortJ_Input 00000000

Symbol: PortJ_Input
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: PortJ_Input unused
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 41 in file main.s
   Uses
      At line 83 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 42 in file main.s
      At line 67 in file main.s
   Uses
      At line 141 in file main.s
Warning: SysTick_Wait1ms multiply definedComment: SysTick_Wait1ms used once
SysTick_Wait1us 00000000

Symbol: SysTick_Wait1us
   Definitions
      At line 66 in file main.s
   Uses
      None
Comment: SysTick_Wait1us unused
select_dig_DS 00000000

Symbol: select_dig_DS
   Definitions
      At line 61 in file main.s
   Uses
      None
Comment: select_dig_DS unused
select_leds 00000000

Symbol: select_leds
   Definitions
      At line 60 in file main.s
   Uses
      None
Comment: select_leds unused
turn_DS1_ON 00000000

Symbol: turn_DS1_ON
   Definitions
      At line 63 in file main.s
   Uses
      None
Comment: turn_DS1_ON unused
turn_DS2_ON 00000000




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

Symbol: turn_DS2_ON
   Definitions
      At line 64 in file main.s
   Uses
      None
Comment: turn_DS2_ON unused
turn_leds_ON 00000000

Symbol: turn_leds_ON
   Definitions
      At line 62 in file main.s
   Uses
      None
Comment: turn_leds_ON unused
22 symbols
385 symbols in table
